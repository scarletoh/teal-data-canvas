import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Github, Linkedin, Mail, MapPin, Clock, MessageCircle, User, Edit3, Send, ArrowRight, Phone, Award, Star, CheckCircle, ExternalLink, Copy, Heart, Zap, Users, TrendingUp, Coffee, Quote, Target } from 'lucide-react';
import { useState, useEffect } from 'react';
import { useTheme } from '@/contexts/theme-provider';

const Contact = () => {
  const [focusedField, setFocusedField] = useState<string | null>(null);
  const [isVisible, setIsVisible] = useState(false);
  const [copiedEmail, setCopiedEmail] = useState(false);
  const [currentFeedbackStep, setCurrentFeedbackStep] = useState(1);
  const [feedbackType, setFeedbackType] = useState('');
  const [feedbackName, setFeedbackName] = useState('');
  const [feedbackEmail, setFeedbackEmail] = useState('');
  const [feedbackMessage, setFeedbackMessage] = useState('');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });
  const { theme } = useTheme();

  // We'll use IntersectionObserver to trigger the animation when scrolled into view
  const handleIntersection = (entries: IntersectionObserverEntry[]) => {
    const [entry] = entries;
    if (entry.isIntersecting) {
      setIsVisible(true);
    }
  };

  // Set up observer
  useEffect(() => {
    const observer = new IntersectionObserver(handleIntersection, {
      threshold: 0.2
    });

    const section = document.getElementById('contact');
    if (section) observer.observe(section);

    return () => {
      if (section) observer.unobserve(section);
    };
  }, []);

  const copyEmail = async () => {
    try {
      await navigator.clipboard.writeText('scharbutcher@gmail.com');
      setCopiedEmail(true);
      setTimeout(() => setCopiedEmail(false), 2000);
    } catch (err) {
      console.error('Failed to copy email:', err);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFeedbackSubmit = () => {
    // Here you would typically send the feedback to your backend
    console.log('Feedback submitted:', {
      type: feedbackType,
      name: feedbackName,
      email: feedbackEmail,
      message: feedbackMessage
    });

    // Reset form and show success state
    setFeedbackType('');
    setFeedbackName('');
    setFeedbackEmail('');
    setFeedbackMessage('');

    // You could show a success toast here
    alert('Thank you so much for your feedback! I truly appreciate you taking the time to share your thoughts about my portfolio and work. Your input helps me grow and improve my personal brand as a data scientist.');
  const contactMethods = [
    {
      icon: Mail,
      label: 'Email',
      value: 'scharbutcher@gmail.com',
      description: 'Best for detailed project discussions and formal inquiries',
      action: copyEmail,
      actionLabel: copiedEmail ? 'Copied!' : 'Copy',
      color: 'text-blue-600'
    },
    {
      icon: Phone,
      label: 'Phone',
      value: '0784416439',
      description: 'Quick calls for urgent matters or initial consultations',
      href: 'tel:0784416439',
      color: 'text-green-600'
    },
    {
      icon: Linkedin,
      label: 'LinkedIn',
      value: 'Professional Network',
      description: 'Connect for professional networking and industry discussions',
      href: 'https://linkedin.com/in/scharbutcher',
      color: 'text-blue-700'
    },
    {
      icon: Github,
      label: 'GitHub',
      value: 'Code Portfolio',
      description: 'View my open source contributions and technical projects',
      href: 'https://github.com/yourusername',
      color: 'text-gray-800 dark:text-gray-200'
    }
  ];

  const stats = [
    {
      icon: Users,
      value: '15+',
      label: 'Happy Clients',
      color: 'text-blue-600'
    },
    {
      icon: Award,
      value: '30+',
      label: 'Projects Completed',
      color: 'text-green-600'
    },
    {
      icon: TrendingUp,
      value: '3',
      label: 'Years Experience',
      color: 'text-purple-600'
    },
    {
      icon: Coffee,
      value: '500+',
      label: 'Cups of Coffee',
      color: 'text-orange-600'
    }
  ];

  const services = [
    {
      icon: TrendingUp,
      title: 'Data Analysis & Insights',
      description: 'Transform raw data into strategic business intelligence that drives informed decision-making and competitive advantage.',
      features: ['Statistical Analysis', 'Data Visualization', 'Business Intelligence', 'Performance Dashboards']
    },
    {
      icon: Zap,
      title: 'Machine Learning Solutions',
      description: 'Custom ML models and AI systems that automate processes, predict outcomes, and create intelligent business solutions.',
      features: ['Predictive Modeling', 'Algorithm Development', 'Model Optimization', 'AI Implementation']
    },
    {
      icon: Target,
      title: 'Strategic Consulting',
      description: 'Expert guidance on data strategy, technology selection, and digital transformation initiatives that deliver measurable results.',
      features: ['Data Strategy', 'Technology Assessment', 'Process Optimization', 'Team Training']
    }
  ];

  const availability = [
    { day: 'Monday - Friday', hours: '9:00 AM - 6:00 PM', available: true },
    { day: 'Saturday', hours: '10:00 AM - 2:00 PM', available: true },
    { day: 'Sunday', hours: 'Available for urgent matters', available: false }
  ];

  return (
    <div className={`min-h-screen transition-colors duration-300 ${
      theme === 'light'
        ? 'bg-gradient-to-br from-gray-50 via-white to-gray-100 text-gray-900'
        : 'bg-black text-white relative'
    }`}>
      {/* Enhanced background effects */}
      {theme === 'dark' && (
        <>
          <div className="absolute inset-0 bg-gradient-to-br from-gray-900/20 via-transparent to-gray-800/10"></div>
          <div className="absolute inset-0 bg-gradient-radial from-gray-900/30 via-transparent to-transparent"></div>
        </>
      )}

      <div className="relative z-10">
        <Navbar />
        <main className="pt-20">

          {/* Compact Hero Section */}
          <section id="contact" className="py-12 lg:py-16 relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-br from-[#DC143C]/5 via-transparent to-[#B91C3C]/5"></div>

            <div className="container mx-auto px-4 relative z-10">
              <div className={`max-w-5xl mx-auto transition-all duration-1000 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>

                {/* Compact Header */}
                <div className="text-center mb-8">
                  <div className="inline-flex items-center gap-2 bg-gradient-to-r from-[#DC143C]/10 to-[#B91C3C]/10 px-3 py-1 rounded-full mb-4">
                    <MessageCircle className="w-3 h-3 text-[#DC143C]" />
                    <span className="text-[#DC143C] font-inter text-xs font-medium">Let's Connect</span>
                  </div>

                  <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-[#DC143C] to-[#B91C3C] bg-clip-text text-transparent">
                    Let's Start a Conversation
                  </h1>

                  <div className="h-0.5 w-16 bg-gradient-to-r from-[#DC143C] to-[#B91C3C] mx-auto mb-6"></div>

                  <p className="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto leading-relaxed">
                    Ready to transform your data challenges into opportunities? I'm always excited to discuss
                    new projects, share insights, or explore collaboration possibilities.
                  </p>

                  {/* See My Work Button - Mobile Visible */}
                  <div className="mt-8 md:hidden">
                    <a
                      href="/projects"
                      className="group inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-[#DC143C] to-[#B91C3C] hover:from-[#B91C3C] hover:to-[#A0163C] text-white font-bold rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-[#DC143C]/40 border border-[#DC143C]/30 font-['Poppins'] text-lg"
                    >
                      <div className="relative">
                        <svg className="w-6 h-6 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                        </svg>
                        <div className="absolute -top-1 -right-1 w-2 h-2 bg-white rounded-full opacity-80 animate-pulse"></div>
                      </div>
                      <span>See My Work</span>
                      <svg className="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8l4 4m0 0l-4 4m4-4H3" />
                      </svg>
                    </a>
                  </div>
                </div>

                {/* Compact Stats */}
                <div className={`grid grid-cols-2 md:grid-cols-4 gap-4 transition-all duration-1000 delay-200 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
                  {stats.map((stat, index) => (
                    <div key={stat.label} className="glass-card p-4 text-center hover:scale-105 transition-all duration-300 group">
                      <div className={`w-8 h-8 mx-auto mb-2 rounded-full bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 flex items-center justify-center group-hover:scale-110 transition-transform`}>
                        <stat.icon className={`w-4 h-4 ${stat.color}`} />
                      </div>
                      <div className="text-lg font-bold text-gray-900 dark:text-white mb-1">{stat.value}</div>
                      <div className="text-xs text-gray-600 dark:text-gray-400">{stat.label}</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </section>

          {/* Services Overview */}
          <section className={`py-20 relative overflow-hidden transition-all duration-1000 delay-400 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <div className="absolute inset-0 bg-gradient-to-br from-[#DC143C]/5 via-transparent to-[#B91C3C]/5"></div>

            <div className="container mx-auto px-4 relative z-10">
              <div className="max-w-6xl mx-auto">
                <div className="text-center mb-12">
                  <h3 className="text-3xl font-bold mb-4 text-gray-900 dark:text-white">How I Can Help</h3>
                  <p className="text-gray-600 dark:text-gray-300 text-lg max-w-2xl mx-auto">
                    Specialized services tailored to transform your data challenges into competitive advantages.
                  </p>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                  {services.map((service, index) => (
                    <div key={service.title} className="glass-card p-8 hover:scale-105 transition-all duration-300 group">
                      <div className={`w-16 h-16 mx-auto mb-6 rounded-2xl bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 flex items-center justify-center group-hover:scale-110 transition-transform`}>
                        <service.icon className="w-8 h-8 text-[#DC143C]" />
                      </div>

                      <h4 className="text-xl font-bold mb-3 text-center text-gray-900 dark:text-white group-hover:text-[#DC143C] transition-colors">
                        {service.title}
                      </h4>

                      <p className="text-gray-600 dark:text-gray-300 text-center mb-6 text-sm">
                        {service.description}
                      </p>

                      <div className="space-y-2">
                        {service.features.map((feature, featureIndex) => (
                          <div key={featureIndex} className="flex items-center gap-2 text-sm">
                            <CheckCircle className="w-4 h-4 text-green-500 flex-shrink-0" />
                            <span className="text-gray-600 dark:text-gray-400">{feature}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </section>

          {/* Contact Methods Grid */}
          <section className={`py-20 bg-gradient-to-b from-background/80 to-background transition-all duration-1000 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <div className="container mx-auto px-4">
              <div className="max-w-6xl mx-auto">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-16">
                  {contactMethods.map((method, index) => (
                    <div key={method.label} className="glass-card p-6 hover:scale-105 transition-all duration-300 group border border-border/50 hover:border-[#DC143C]/30">
                      <div className="flex items-start gap-4">
                        <div className={`w-12 h-12 rounded-lg bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>
                          <method.icon className={`w-6 h-6 text-[#DC143C] ${method.color}`} />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between mb-2">
                            <h3 className="font-bold text-gray-900 dark:text-white group-hover:text-[#DC143C] transition-colors">
                              {method.label}
                            </h3>
                            {method.action && (
                              <button
                                onClick={(e) => {
                                  e.preventDefault();
                                  method.action();
                                }}
                                className="text-xs px-2 py-1 rounded bg-gray-100 dark:bg-gray-800 hover:bg-[#DC143C] hover:text-white transition-all duration-300"
                              >
                                {method.actionLabel}
                              </button>
                            )}
                          </div>
                          <p className="text-[#DC143C] font-medium text-sm mb-2">{method.value}</p>
                          <p className="text-gray-600 dark:text-gray-300 text-xs leading-relaxed">
                            {method.description}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </section>

          {/* Two Column Layout - Contact Form & Info */}
          <section className={`py-20 relative overflow-hidden transition-all duration-1000 delay-300 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <div className="absolute inset-0 bg-gradient-to-br from-[#DC143C]/5 via-transparent to-[#B91C3C]/5"></div>

            <div className="container mx-auto px-4 relative z-10">
              <div className="max-w-6xl mx-auto">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
                  {/* Contact Form */}
                  <div className="glass-card p-8">
                    <div className="text-center mb-8">
                      <div className="w-16 h-16 bg-gradient-to-br from-[#DC143C] to-[#B91C3C] rounded-full flex items-center justify-center mx-auto mb-4">
                        <Send className="w-8 h-8 text-white" />
                      </div>
                      <h3 className="text-2xl font-bold text-foreground mb-2">
                        Send Me a Message
                      </h3>
                      <p className="text-muted-foreground text-sm">
                        I'll get back to you within 24 hours
                      </p>
                    </div>

                    <form className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label htmlFor="name" className="block text-sm font-medium text-foreground mb-2">
                            Full Name
                          </label>
                          <input
                            type="text"
                            id="name"
                            name="name"
                            value={formData.name}
                            onChange={handleInputChange}
                            className={`w-full px-4 py-3 bg-background border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-[#DC143C]/50 focus:border-[#DC143C] transition-all duration-300 ${
                              focusedField === 'name' ? 'border-[#DC143C] shadow-lg shadow-[#DC143C]/20' : 'border-border'
                            }`}
                            placeholder="Enter your name"
                            onFocus={() => setFocusedField('name')}
                            onBlur={() => setFocusedField(null)}
                          />
                        </div>

                        <div>
                          <label htmlFor="email" className="block text-sm font-medium text-foreground mb-2">
                            Email Address
                          </label>
                          <input
                            type="email"
                            id="email"
                            name="email"
                            value={formData.email}
                            onChange={handleInputChange}
                            className={`w-full px-4 py-3 bg-background border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-[#DC143C]/50 focus:border-[#DC143C] transition-all duration-300 ${
                              focusedField === 'email' ? 'border-[#DC143C] shadow-lg shadow-[#DC143C]/20' : 'border-border'
                            }`}
                            placeholder="your.email@example.com"
                            onFocus={() => setFocusedField('email')}
                            onBlur={() => setFocusedField(null)}
                          />
                        </div>
                      </div>

                      <div>
                        <label htmlFor="subject" className="block text-sm font-medium text-foreground mb-2">
                          Subject
                        </label>
                        <input
                          type="text"
                          id="subject"
                          name="subject"
                          value={formData.subject}
                          onChange={handleInputChange}
                          className={`w-full px-4 py-3 bg-background border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-[#DC143C]/50 focus:border-[#DC143C] transition-all duration-300 ${
                            focusedField === 'subject' ? 'border-[#DC143C] shadow-lg shadow-[#DC143C]/20' : 'border-border'
                          }`}
                          placeholder="What's this about?"
                          onFocus={() => setFocusedField('subject')}
                          onBlur={() => setFocusedField(null)}
                        />
                      </div>

                      <div>
                        <label htmlFor="message" className="block text-sm font-medium text-foreground mb-2">
                          Message
                        </label>
                        <textarea
                          id="message"
                          name="message"
                          value={formData.message}
                          onChange={handleInputChange}
                          rows={6}
                          className={`w-full px-4 py-3 bg-background border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-[#DC143C]/50 focus:border-[#DC143C] transition-all duration-300 resize-none ${
                            focusedField === 'message' ? 'border-[#DC143C] shadow-lg shadow-[#DC143C]/20' : 'border-border'
                          }`}
                          placeholder="Tell me about your project or inquiry..."
                          onFocus={() => setFocusedField('message')}
                          onBlur={() => setFocusedField(null)}
                        ></textarea>
                      </div>

                      <button
                        type="submit"
                        className="w-full px-8 py-4 bg-gradient-to-r from-[#DC143C] to-[#B91C3C] hover:from-[#B91C3C] hover:to-[#A0163C] text-white font-bold rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-[#DC143C]/25 border border-[#DC143C]/30 group"
                      >
                        <span className="flex items-center justify-center gap-2">
                          <Send className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" />
                          Send Message
                        </span>
                      </button>
                    </form>
                  </div>

                  {/* Contact Information & Availability */}
                  <div className="space-y-8">
                    {/* Availability */}
                    <div className="glass-card p-6">
                      <div className="flex items-center gap-3 mb-6">
                        <div className="w-10 h-10 bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 rounded-full flex items-center justify-center">
                          <Clock className="w-5 h-5 text-[#DC143C]" />
                        </div>
                        <div>
                          <h3 className="font-bold text-foreground">Availability</h3>
                          <p className="text-muted-foreground text-sm">When I'm typically available</p>
                        </div>
                      </div>

                      <div className="space-y-3">
                        {availability.map((slot, index) => (
                          <div key={index} className="flex items-center justify-between p-3 rounded-lg hover:bg-[#DC143C]/5 transition-colors">
                            <div className="flex items-center gap-3">
                              <div className={`w-2 h-2 rounded-full ${slot.available ? 'bg-green-500' : 'bg-muted'}`}></div>
                              <span className="text-sm text-foreground">{slot.day}</span>
                            </div>
                            <span className="text-xs text-muted-foreground">{slot.hours}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Location */}
                    <div className="glass-card p-6">
                      <div className="flex items-center gap-3 mb-4">
                        <div className="w-10 h-10 bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 rounded-full flex items-center justify-center">
                          <MapPin className="w-5 h-5 text-[#DC143C]" />
                        </div>
                        <div>
                          <h3 className="font-bold text-foreground">Location</h3>
                          <p className="text-muted-foreground text-sm">Where I'm based</p>
                        </div>
                      </div>

                      <div className="space-y-1">
                        <p className="font-medium text-foreground">Nairobi, Kenya</p>
                        <p className="text-sm text-muted-foreground">
                          East Africa Time (EAT) - UTC+3
                        </p>
                      </div>
                    </div>

                    {/* Response Time */}
                    <div className="glass-card p-6">
                      <div className="flex items-center gap-3 mb-4">
                        <div className="w-10 h-10 bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 rounded-full flex items-center justify-center">
                          <Award className="w-5 h-5 text-[#DC143C]" />
                        </div>
                        <div>
                          <h3 className="font-bold text-foreground">Response Time</h3>
                          <p className="text-muted-foreground text-sm">How quickly I respond</p>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div className="text-center p-3 bg-[#DC143C]/10 rounded-lg">
                          <div className="text-2xl font-bold text-[#DC143C] mb-1">24h</div>
                          <div className="text-xs text-muted-foreground">Email Response</div>
                        </div>
                        <div className="text-center p-3 bg-[#DC143C]/10 rounded-lg">
                          <div className="text-2xl font-bold text-[#DC143C] mb-1">2h</div>
                          <div className="text-xs text-muted-foreground">LinkedIn Messages</div>
                        </div>
                      </div>
                    </div>

                    {/* Philosophy Quote */}
                    <div className="glass-card p-6 border-l-4 border-[#DC143C]">
                      <div className="flex items-start gap-3">
                        <Star className="w-5 h-5 text-[#DC143C] mt-1 flex-shrink-0" />
                        <div>
                          <p className="font-bold text-[#DC143C] mb-2">My Philosophy</p>
                          <p className="text-muted-foreground text-sm italic leading-relaxed">
                            "Data Decoded Dominated" - I believe in not just analyzing data, but mastering it to unlock
                            its full potential for driving business decisions and creating impactful solutions.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Clean & Modern CTA Section */}
          <section className={`py-16 relative overflow-hidden transition-all duration-1000 delay-500 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            {/* Subtle background */}
            <div className="absolute inset-0 bg-gradient-to-br from-[#DC143C]/8 via-transparent to-[#B91C3C]/8"></div>

            <div className="container mx-auto px-4 relative z-10">
              <div className="max-w-4xl mx-auto text-center">
                {/* Clean glass card */}
                <div className="relative glass-card p-8 md:p-10">
                  {/* Simple animated background */}
                  <div className="absolute inset-0 opacity-3">
                    <div className="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-[#DC143C]/20 via-transparent to-[#B91C3C]/20"></div>
                  </div>

                  {/* Content */}
                  <div className="relative z-10">
                    {/* Clean header */}
                    <div className="mb-8">
                      <h3 className="text-2xl md:text-3xl font-bold mb-4 text-gray-900 dark:text-white leading-tight">
                        <span className="text-[#DC143C]">Ready to turn your data challenges into opportunities?</span>
                      </h3>

                      <div className="w-16 h-0.5 bg-[#DC143C] mx-auto mb-6"></div>
                    </div>

                    {/* Clean description */}
                    <div className="mb-8">
                      <p className="text-lg text-gray-600 dark:text-gray-300 leading-relaxed max-w-3xl mx-auto">
                        Whether you need
                        <span className="font-semibold text-[#DC143C] mx-1">data analysis</span>,
                        <span className="font-semibold text-[#DC143C] mx-1">machine learning solutions</span>, or
                        <span className="font-semibold text-[#DC143C] mx-1">strategic insights</span>,
                        I'm here to help turn your data into
                        <span className="font-bold text-[#B91C3C]">actionable results</span>.
                      </p>
                    </div>

                    {/* Simple status indicators */}
                    <div className="flex items-center justify-center gap-6 mb-8 text-sm text-gray-600 dark:text-gray-400">
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span>Available now</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Award className="w-4 h-4 text-[#DC143C]" />
                        <span>Expert consultation</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4 text-[#DC143C]" />
                        <span>Quick response</span>
                      </div>
                    </div>

                    {/* Clean action buttons */}
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                      <a
                        href="mailto:scharbutcher@gmail.com"
                        className="group flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-[#DC143C] to-[#B91C3C] hover:from-[#B91C3C] hover:to-[#A0163C] text-white font-semibold rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg border border-[#DC143C]/30"
                      >
                        <Mail className="w-5 h-5" />
                        <span>Send Email Now</span>
                      </a>

                      <a
                        href="tel:0784416439"
                        className="group flex items-center justify-center gap-2 px-6 py-3 bg-transparent border-2 border-[#DC143C] text-[#DC143C] hover:bg-[#DC143C] hover:text-white font-semibold rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg"
                      >
                        <Phone className="w-5 h-5" />
                        <span>Call Directly</span>
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Enhanced Feedback Section */}
          <section className={`py-20 relative overflow-hidden transition-all duration-1000 delay-600 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <div className="absolute inset-0 bg-gradient-to-br from-[#DC143C]/8 via-transparent to-[#B91C3C]/8"></div>

            <div className="container mx-auto px-4 relative z-10">
              <div className="max-w-4xl mx-auto">
                <div className="text-center mb-16">
                  <div className="inline-flex items-center gap-2 bg-gradient-to-r from-[#DC143C]/15 to-[#B91C3C]/15 px-4 py-2 rounded-full mb-6 border border-[#DC143C]/30 backdrop-blur-sm">
                    <MessageCircle className="w-4 h-4 text-[#DC143C] animate-pulse" />
                    <span className="text-[#DC143C] font-poppins-medium text-sm">Interactive Feedback</span>
                  </div>

                  <h2 className="text-3xl md:text-4xl font-montserrat-bold mb-4 text-gray-900 dark:text-white">
                    Share Your Feedback
                  </h2>
                  <p className="font-inter-regular text-gray-600 dark:text-gray-300 text-lg max-w-2xl mx-auto">
                    Help me improve by sharing your thoughts about my portfolio, my work, or any suggestions you might have. Your feedback means a lot to me as I build my personal brand and showcase my data science expertise.
                  </p>
                </div>

                {/* Animated Feedback Wizard */}
                <div className="glass-card p-8 max-w-2xl mx-auto relative overflow-hidden">
                  {/* Animated background elements */}
                  <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-[#DC143C]/10 to-transparent rounded-full animate-pulse"></div>
                  <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-[#B91C3C]/10 to-transparent rounded-full animate-pulse delay-1000"></div>

                  <div className="relative">
                    {/* Step Indicator */}
                    <div className="flex items-center justify-center mb-8">
                      <div className="flex items-center space-x-2">
                        {[1, 2, 3].map((step) => (
                          <div key={step} className={`flex items-center ${step < 3 ? 'flex-1' : ''}`}>
                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold transition-all duration-300 ${
                              step <= currentFeedbackStep
                                ? 'bg-gradient-to-r from-[#DC143C] to-[#B91C3C] text-white shadow-lg shadow-[#DC143C]/30'
                                : 'bg-gray-200 dark:bg-gray-700 text-gray-500'
                            }`}>
                              {step}
                            </div>
                            {step < 3 && (
                              <div className={`flex-1 h-0.5 mx-2 transition-all duration-300 ${
                                step < currentFeedbackStep ? 'bg-gradient-to-r from-[#DC143C] to-[#B91C3C]' : 'bg-gray-200 dark:bg-gray-700'
                              }`}></div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Step Content with Animations */}
                    <div className="min-h-[400px] flex items-center justify-center">
                      {currentFeedbackStep === 1 && (
                        <div className={`text-center transition-all duration-500 transform ${isVisible ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-4 opacity-0 scale-95'}`}>
                          <div className="w-20 h-20 bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse">
                            <MessageCircle className="w-10 h-10 text-[#DC143C]" />
                          </div>
                          <h3 className="text-2xl font-montserrat-bold mb-4 text-gray-900 dark:text-white">What's your feedback about?</h3>
                          <p className="text-gray-600 dark:text-gray-300 mb-8">Choose the type of feedback you'd like to share</p>

                          <div className="grid grid-cols-2 gap-4 max-w-md mx-auto">
                            {[
                              { type: 'general', label: 'General Feedback', icon: '💭' },
                              { type: 'bug', label: 'Bug Report', icon: '🐛' },
                              { type: 'feature', label: 'Feature Request', icon: '✨' },
                              { type: 'design', label: 'Design Suggestion', icon: '🎨' }
                            ].map((option) => (
                              <button
                                key={option.type}
                                onClick={() => {
                                  setFeedbackType(option.type);
                                  setCurrentFeedbackStep(2);
                                }}
                                className="group p-4 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 hover:from-[#DC143C]/10 hover:to-[#B91C3C]/10 rounded-xl border border-gray-200 dark:border-gray-700 hover:border-[#DC143C]/50 transition-all duration-300 hover:scale-105 hover:shadow-lg"
                              >
                                <div className="text-2xl mb-2 group-hover:scale-110 transition-transform duration-300">{option.icon}</div>
                                <div className="text-sm font-medium text-gray-700 dark:text-gray-300 group-hover:text-[#DC143C] transition-colors duration-300">{option.label}</div>
                              </button>
                            ))}
                          </div>
                        </div>
                      )}

                      {currentFeedbackStep === 2 && (
                        <div className={`w-full transition-all duration-500 transform ${isVisible ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-4 opacity-0 scale-95'}`}>
                          <div className="text-center mb-6">
                            <div className="w-16 h-16 bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 rounded-full flex items-center justify-center mx-auto mb-4 animate-bounce">
                              <User className="w-8 h-8 text-[#DC143C]" />
                            </div>
                            <h3 className="text-2xl font-montserrat-bold mb-2 text-gray-900 dark:text-white">Tell me about yourself</h3>
                            <p className="text-gray-600 dark:text-gray-300">Help me personalize your feedback experience on my portfolio</p>
                          </div>

                          <div className="space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="relative">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                  Your Name *
                                </label>
                                <input
                                  type="text"
                                  value={feedbackName}
                                  onChange={(e) => setFeedbackName(e.target.value)}
                                  className="w-full px-4 py-3 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#DC143C]/50 focus:border-[#DC143C] transition-all duration-300"
                                  placeholder="Enter your name"
                                />
                              </div>

                              <div className="relative">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                  Email Address *
                                </label>
                                <input
                                  type="email"
                                  value={feedbackEmail}
                                  onChange={(e) => setFeedbackEmail(e.target.value)}
                                  className="w-full px-4 py-3 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#DC143C]/50 focus:border-[#DC143C] transition-all duration-300"
                                  placeholder="your.email@example.com"
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      )}

                      {currentFeedbackStep === 3 && (
                        <div className={`w-full transition-all duration-500 transform ${isVisible ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-4 opacity-0 scale-95'}`}>
                          <div className="text-center mb-6">
                            <div className="w-16 h-16 bg-gradient-to-br from-[#DC143C]/20 to-[#B91C3C]/20 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
                              <Edit3 className="w-8 h-8 text-[#DC143C]" />
                            </div>
                            <h3 className="text-2xl font-montserrat-bold mb-2 text-gray-900 dark:text-white">Share your thoughts</h3>
                            <p className="text-gray-600 dark:text-gray-300">Your feedback matters a lot to me - this is my personal portfolio website</p>
                          </div>

                          <div className="space-y-4">
                            <div className="relative">
                              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Your Message *
                              </label>
                              <textarea
                                value={feedbackMessage}
                                onChange={(e) => setFeedbackMessage(e.target.value)}
                                rows={6}
                                className="w-full px-4 py-3 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#DC143C]/50 focus:border-[#DC143C] transition-all duration-300 resize-none"
                                placeholder="Share your thoughts, suggestions, or feedback..."
                              />
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Navigation Buttons */}
                    <div className="flex items-center justify-between mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
                      <button
                        onClick={() => setCurrentFeedbackStep(Math.max(1, currentFeedbackStep - 1))}
                        className={`px-6 py-3 rounded-lg font-medium transition-all duration-300 ${
                          currentFeedbackStep === 1
                            ? 'opacity-0 pointer-events-none'
                            : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 hover:scale-105'
                        }`}
                      >
                        ← Previous
                      </button>

                      {currentFeedbackStep < 3 ? (
                        <button
                          onClick={() => setCurrentFeedbackStep(currentFeedbackStep + 1)}
                          className="px-8 py-4 bg-gradient-to-r from-[#DC143C] to-[#B91C3C] hover:from-[#B91C3C] hover:to-[#A0163C] text-white font-montserrat-bold rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-[#DC143C]/25 border border-[#DC143C]/30 flex items-center gap-2"
                        >
                          Continue
                          <ArrowRight className="w-4 h-4" />
                        </button>
                      ) : (
                        <button
                          onClick={handleFeedbackSubmit}
                          disabled={!feedbackName || !feedbackEmail || !feedbackMessage}
                          className={`px-8 py-4 font-montserrat-bold rounded-xl transition-all duration-300 flex items-center gap-2 ${
                            feedbackName && feedbackEmail && feedbackMessage
                              ? 'bg-gradient-to-r from-[#DC143C] to-[#B91C3C] hover:from-[#B91C3C] hover:to-[#A0163C] text-white hover:scale-105 hover:shadow-xl hover:shadow-[#DC143C]/25 border border-[#DC143C]/30'
                              : 'bg-gray-300 dark:bg-gray-600 text-gray-500 cursor-not-allowed'
                          }`}
                        >
                          <Send className="w-4 h-4" />
                          Submit Feedback
                        </button>
                      )}
                    </div>

                    {/* Progress Dots */}
                    <div className="flex justify-center space-x-2 mt-4">
                      {[1, 2, 3].map((step) => (
                        <div
                          key={step}
                          className={`w-2 h-2 rounded-full transition-all duration-300 ${
                            step === currentFeedbackStep
                              ? 'bg-[#DC143C] w-6 animate-pulse'
                              : step < currentFeedbackStep
                              ? 'bg-[#B91C3C]'
                              : 'bg-gray-300 dark:bg-gray-600'
                          }`}
                        ></div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

        </main>
        <Footer />
      </div>
    </div>
  );
};

export default Contact;
